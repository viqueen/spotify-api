/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlaylistObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlaylistObject{}

// PlaylistObject struct for PlaylistObject
type PlaylistObject struct {
	// `true` if the owner allows other users to modify the playlist. 
	Collaborative *bool `json:"collaborative,omitempty"`
	// The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`. 
	Description NullableString `json:"description,omitempty"`
	// Known external URLs for this playlist. 
	ExternalUrls *ExternalUrlObject `json:"external_urls,omitempty"`
	// Information about the followers of the playlist.
	Followers *FollowersObject `json:"followers,omitempty"`
	// A link to the Web API endpoint providing full details of the playlist. 
	Href *string `json:"href,omitempty"`
	// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 
	Id *string `json:"id,omitempty"`
	// Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._ 
	Images []ImageObject `json:"images,omitempty"`
	// The name of the playlist. 
	Name *string `json:"name,omitempty"`
	// The user who owns the playlist 
	Owner *PlaylistOwnerObject `json:"owner,omitempty"`
	// The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists) 
	Public *bool `json:"public,omitempty"`
	// The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version 
	SnapshotId *string `json:"snapshot_id,omitempty"`
	// The tracks of the playlist. 
	Tracks *PagingPlaylistTrackObject `json:"tracks,omitempty"`
	// The object type: \"playlist\" 
	Type *string `json:"type,omitempty"`
	// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 
	Uri *string `json:"uri,omitempty"`
}

// NewPlaylistObject instantiates a new PlaylistObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaylistObject() *PlaylistObject {
	this := PlaylistObject{}
	return &this
}

// NewPlaylistObjectWithDefaults instantiates a new PlaylistObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaylistObjectWithDefaults() *PlaylistObject {
	this := PlaylistObject{}
	return &this
}

// GetCollaborative returns the Collaborative field value if set, zero value otherwise.
func (o *PlaylistObject) GetCollaborative() bool {
	if o == nil || IsNil(o.Collaborative) {
		var ret bool
		return ret
	}
	return *o.Collaborative
}

// GetCollaborativeOk returns a tuple with the Collaborative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetCollaborativeOk() (*bool, bool) {
	if o == nil || IsNil(o.Collaborative) {
		return nil, false
	}
	return o.Collaborative, true
}

// HasCollaborative returns a boolean if a field has been set.
func (o *PlaylistObject) HasCollaborative() bool {
	if o != nil && !IsNil(o.Collaborative) {
		return true
	}

	return false
}

// SetCollaborative gets a reference to the given bool and assigns it to the Collaborative field.
func (o *PlaylistObject) SetCollaborative(v bool) {
	o.Collaborative = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlaylistObject) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlaylistObject) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PlaylistObject) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PlaylistObject) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PlaylistObject) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PlaylistObject) UnsetDescription() {
	o.Description.Unset()
}

// GetExternalUrls returns the ExternalUrls field value if set, zero value otherwise.
func (o *PlaylistObject) GetExternalUrls() ExternalUrlObject {
	if o == nil || IsNil(o.ExternalUrls) {
		var ret ExternalUrlObject
		return ret
	}
	return *o.ExternalUrls
}

// GetExternalUrlsOk returns a tuple with the ExternalUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetExternalUrlsOk() (*ExternalUrlObject, bool) {
	if o == nil || IsNil(o.ExternalUrls) {
		return nil, false
	}
	return o.ExternalUrls, true
}

// HasExternalUrls returns a boolean if a field has been set.
func (o *PlaylistObject) HasExternalUrls() bool {
	if o != nil && !IsNil(o.ExternalUrls) {
		return true
	}

	return false
}

// SetExternalUrls gets a reference to the given ExternalUrlObject and assigns it to the ExternalUrls field.
func (o *PlaylistObject) SetExternalUrls(v ExternalUrlObject) {
	o.ExternalUrls = &v
}

// GetFollowers returns the Followers field value if set, zero value otherwise.
func (o *PlaylistObject) GetFollowers() FollowersObject {
	if o == nil || IsNil(o.Followers) {
		var ret FollowersObject
		return ret
	}
	return *o.Followers
}

// GetFollowersOk returns a tuple with the Followers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetFollowersOk() (*FollowersObject, bool) {
	if o == nil || IsNil(o.Followers) {
		return nil, false
	}
	return o.Followers, true
}

// HasFollowers returns a boolean if a field has been set.
func (o *PlaylistObject) HasFollowers() bool {
	if o != nil && !IsNil(o.Followers) {
		return true
	}

	return false
}

// SetFollowers gets a reference to the given FollowersObject and assigns it to the Followers field.
func (o *PlaylistObject) SetFollowers(v FollowersObject) {
	o.Followers = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *PlaylistObject) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *PlaylistObject) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *PlaylistObject) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PlaylistObject) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PlaylistObject) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PlaylistObject) SetId(v string) {
	o.Id = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *PlaylistObject) GetImages() []ImageObject {
	if o == nil || IsNil(o.Images) {
		var ret []ImageObject
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetImagesOk() ([]ImageObject, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *PlaylistObject) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ImageObject and assigns it to the Images field.
func (o *PlaylistObject) SetImages(v []ImageObject) {
	o.Images = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PlaylistObject) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PlaylistObject) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PlaylistObject) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *PlaylistObject) GetOwner() PlaylistOwnerObject {
	if o == nil || IsNil(o.Owner) {
		var ret PlaylistOwnerObject
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetOwnerOk() (*PlaylistOwnerObject, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *PlaylistObject) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given PlaylistOwnerObject and assigns it to the Owner field.
func (o *PlaylistObject) SetOwner(v PlaylistOwnerObject) {
	o.Owner = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *PlaylistObject) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *PlaylistObject) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *PlaylistObject) SetPublic(v bool) {
	o.Public = &v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise.
func (o *PlaylistObject) GetSnapshotId() string {
	if o == nil || IsNil(o.SnapshotId) {
		var ret string
		return ret
	}
	return *o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetSnapshotIdOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotId) {
		return nil, false
	}
	return o.SnapshotId, true
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *PlaylistObject) HasSnapshotId() bool {
	if o != nil && !IsNil(o.SnapshotId) {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given string and assigns it to the SnapshotId field.
func (o *PlaylistObject) SetSnapshotId(v string) {
	o.SnapshotId = &v
}

// GetTracks returns the Tracks field value if set, zero value otherwise.
func (o *PlaylistObject) GetTracks() PagingPlaylistTrackObject {
	if o == nil || IsNil(o.Tracks) {
		var ret PagingPlaylistTrackObject
		return ret
	}
	return *o.Tracks
}

// GetTracksOk returns a tuple with the Tracks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetTracksOk() (*PagingPlaylistTrackObject, bool) {
	if o == nil || IsNil(o.Tracks) {
		return nil, false
	}
	return o.Tracks, true
}

// HasTracks returns a boolean if a field has been set.
func (o *PlaylistObject) HasTracks() bool {
	if o != nil && !IsNil(o.Tracks) {
		return true
	}

	return false
}

// SetTracks gets a reference to the given PagingPlaylistTrackObject and assigns it to the Tracks field.
func (o *PlaylistObject) SetTracks(v PagingPlaylistTrackObject) {
	o.Tracks = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PlaylistObject) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PlaylistObject) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PlaylistObject) SetType(v string) {
	o.Type = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *PlaylistObject) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistObject) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *PlaylistObject) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *PlaylistObject) SetUri(v string) {
	o.Uri = &v
}

func (o PlaylistObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlaylistObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Collaborative) {
		toSerialize["collaborative"] = o.Collaborative
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.ExternalUrls) {
		toSerialize["external_urls"] = o.ExternalUrls
	}
	if !IsNil(o.Followers) {
		toSerialize["followers"] = o.Followers
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if !IsNil(o.SnapshotId) {
		toSerialize["snapshot_id"] = o.SnapshotId
	}
	if !IsNil(o.Tracks) {
		toSerialize["tracks"] = o.Tracks
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullablePlaylistObject struct {
	value *PlaylistObject
	isSet bool
}

func (v NullablePlaylistObject) Get() *PlaylistObject {
	return v.value
}

func (v *NullablePlaylistObject) Set(val *PlaylistObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaylistObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaylistObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaylistObject(val *PlaylistObject) *NullablePlaylistObject {
	return &NullablePlaylistObject{value: val, isSet: true}
}

func (v NullablePlaylistObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaylistObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


